/*
 * Copyright (c) 2025. Sayat Raykul
 */

import fs from "fs/promises";
import path from "path";
import fetch from "node-fetch";
import chalk from "chalk";
// import { DEFAULT_LANGUAGE, LANGUAGES } from "../configs/languages.js";
import { languages, fallbackLanguage } from "./language.js";
import dotenv from "dotenv";
import { configs } from "./config.js";

dotenv.config({
  path: ".env.development",
});

const LANGUAGES_DIR = path.resolve(configs.localesDirectory); // –ü–∞–ø–∫–∞ —Å —è–∑—ã–∫–æ–≤—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏
const CHUNK_SIZE = 20;
const API_URL = "https://deep-translate1.p.rapidapi.com/language/translate/v2";
const HEADERS = {
  "Content-Type": "application/json",
  "X-RapidAPI-Key": process.env.RAPIDAPI_KEY,
  "X-RapidAPI-Host": "deep-translate1.p.rapidapi.com",
};

// –†–∞–∑–±–∏–≤–∞–µ–º –º–∞—Å—Å–∏–≤ –Ω–∞ –∫—É—Å–∫–∏
function chunkArray(array, size) {
  const result = [];
  for (let i = 0; i < array.length; i += size) {
    result.push(array.slice(i, i + size));
  }
  return result;
}

// –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –ø–ª–æ—Å–∫—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
function flattenTemplates(dataByFile) {
  const entries = [];
  for (const [filename, data] of Object.entries(dataByFile)) {
    for (const [key, value] of Object.entries(data)) {
      entries.push({ filename, key, value });
    }
  }
  return entries;
}

// üîÅ –í—Ä–µ–º–µ–Ω–Ω—ã–π –∫—ç—à –¥–ª—è –æ–¥–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
const translationCache = new Map();

// –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥ —á–µ—Ä–µ–∑ DeepL
async function sendTranslationRequestDeepL(
  text,
  targetLang,
  sourceLang = languages,
) {
  const cacheKey = `${sourceLang}::${targetLang}::${text}`;
  if (translationCache.has(cacheKey)) {
    return translationCache.get(cacheKey);
  }

  console.log(`üîÅ Translating "${text}" to "${targetLang}"`);

  const response = await fetch(API_URL, {
    method: "POST",
    headers: HEADERS,
    body: JSON.stringify({
      q: text,
      source: sourceLang,
      target: targetLang,
    }),
  });

  if (!response.ok) {
    throw new Error(`DeepL API error (${targetLang}): ${response.status}`);
  }

  const result = await response.json();
  const translated = result.data.translations.translatedText[0];
  translationCache.set(cacheKey, translated);
  return translated;
}

// –ü–µ—Ä–µ–≤–æ–¥–∏–º —á–∞–Ω–∫–∏
async function translateChunk(chunk, lang, sourceLang = fallbackLanguage) {
  const results = [];
  for (const item of chunk) {
    if (lang === sourceLang) {
      results.push({ ...item, translated: item.value });
    } else {
      const translated = await sendTranslationRequestDeepL(
        item.value,
        lang,
        sourceLang,
      );
      results.push({ ...item, translated });
    }
  }
  return results;
}

// –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –≤ —Ñ–∞–π–ª, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∫–ª—é—á–∏ –∏ –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ
async function writeTranslations(resultMap) {
  for (const [lang, files] of Object.entries(resultMap)) {
    for (const [filename, translations] of Object.entries(files)) {
      const filePath = path.join(LANGUAGES_DIR, lang, filename);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª —Å –ø–æ–º–æ—â—å—é fs.access
      let existingContent = {};
      try {
        await fs.access(filePath); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–∞
        const content = await fs.readFile(filePath, "utf8");
        existingContent = JSON.parse(content);
      } catch (err) {
        if (err.code !== "ENOENT") {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: ${filePath}`, err);
        }
        // –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (ENOENT), –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç
        existingContent = {};
      }

      // –°–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã —Å –Ω–æ–≤—ã–º–∏
      const mergedContent = { ...existingContent, ...translations };

      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª
      await fs.mkdir(path.dirname(filePath), { recursive: true });
      await fs.writeFile(
        filePath,
        JSON.stringify(mergedContent, null, 2),
        "utf8",
      );
      console.log(`‚úî ${chalk.green(lang)} ‚Üí ${chalk.cyan(filename)}`);
    }
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –∫–ª—é—á–µ–π (–≥–¥–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–∞–≤–Ω–æ –∫–ª—é—á—É)
async function getNewKeys(targetLang) {
  const newKeys = [];
  const targetLangFile = path.join(LANGUAGES_DIR, targetLang);

  const files = await fs.readdir(targetLangFile);
  for (const file of files) {
    const filePath = path.join(targetLangFile, file);
    const content = await fs.readFile(filePath, "utf8");
    const json = JSON.parse(content);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∫–ª—é—á–∏ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏ –∫–ª—é—á–∞
    for (const [key, value] of Object.entries(json)) {
      if (value === key) {
        newKeys.push({ filename: file, key, value });
      }
    }
  }

  return newKeys;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
export async function translate(requestedLang = "all") {
  console.log(
    chalk.blue(`üåç Starting translation generation for ${requestedLang}...`),
  );

  const targetLanguages =
    requestedLang === "all"
      ? languages
      : languages.includes(requestedLang)
        ? [requestedLang]
        : (() => {
            console.error(
              chalk.red(
                `‚ùå Invalid language: "${requestedLang}". Allowed: ${languages.join(", ")}`,
              ),
            );
            return [];
          })();

  if (targetLanguages.length === 0) return;

  console.log({ targetLanguages });
  try {
    // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª—ã –∏–∑ –ø–∞–ø–∫–∏ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —è–∑—ã–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "en")
    const files = await fs.readdir(path.join(LANGUAGES_DIR, fallbackLanguage));

    const dataByFile = {};
    for (const file of files) {
      const filePath = path.join(LANGUAGES_DIR, fallbackLanguage, file);
      const content = await fs.readFile(filePath, "utf8");
      const json = JSON.parse(content);
      dataByFile[file] = json;
    }

    // const entries = flattenTemplates(dataByFile);
    // const chunks = chunkArray(entries, CHUNK_SIZE);
    const resultMap = {};

    // –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ü–µ–ª–µ–≤–æ–≥–æ —è–∑—ã–∫–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –∫–ª—é—á–∏
    for (const lang of targetLanguages) {
      resultMap[lang] = {};
      const newKeys = await getNewKeys(lang);

      // –ü–µ—Ä–µ–≤–æ–¥–∏–º —Ç–æ–ª—å–∫–æ —Ç–µ –∫–ª—é—á–∏, –≥–¥–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–∞–≤–Ω–æ –∫–ª—é—á—É
      for (const chunk of chunkArray(newKeys, CHUNK_SIZE)) {
        const translatedChunk = await translateChunk(
          chunk,
          lang,
          fallbackLanguage,
        );
        for (const { filename, key, translated } of translatedChunk) {
          resultMap[lang][filename] = resultMap[lang][filename] || {};
          resultMap[lang][filename][key] = translated;
        }
      }
    }

    await writeTranslations(resultMap);
    console.log(chalk.green("‚úÖ Translations successfully generated!"));
  } catch (err) {
    console.error(chalk.red("‚ùå Failed to generate translations:"), err);
  }
}
